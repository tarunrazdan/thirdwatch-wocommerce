<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  ai\thirdwatch
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Thirdwatch API
 *
 * The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.  Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  JavaScript Fingerprinting module for capturing unique devices and tracking user interaction.  This script will identify unique devices with respect to the browser. For e.g., if chrome is opened in normal mode a unique device id is generated and this will be same if chrome is opened in incognito mode or reinstalled.  Paste the below script onto your webpage, just after the opening `<body>` tag. This script should be added to the page which is accessed externally by the user of your website. For e.g., If you want to track three different webpages then paste the below script onto each webpage, just after the opening `<body>` tag. This script should not be added onto internal tools or admin panels. ```   &lt;script id=\"thirdwatch\"     data-session-cookie-name=\"&lt;cookie_name&gt;\"     data-session-id-value=\"&lt;session_id&gt;\"     data-user-id=\"&lt;user_id&gt;\"     data-app-secret=\"&lt;app_secret&gt;\"     data-is-track-pageview=\"true\"&gt; (function() {         var loadDeviceJs = function() {         var element = document.createElement(\"script\");         element.async = 1;         element.src = \"https://cdn.thirdwatch.ai/tw.min.js\";         document.body.appendChild(element);         };         if (window.addEventListener) {              window.addEventListener(\"load\", loadDeviceJs, false);         } else if (window.attachEvent) {         window.attachEvent(\"onload\", loadDeviceJs);         }     })();   &lt;/script&gt; ``` * `data-session-cookie-name` -- The cookie name where you are saving the unique session id. We will pick the session id by reading its value from the cookie name. (Optional) * `data-session-id-value` -- In case you are not passing `data-session-cookie-name` than you can put session id directly in this parameter. In absence of both `data-session-cookie-name` and `data-session-id-value`, our system will generate a session Id. (Optional) * `data-user-id` -- Unique user id at your end. This can be email id or primary key in the database. In case of guest user, you can insert session Id here. * `data-app-secret` -- Unique App secret generated for you by Thirdwatch. * `data-is-track-pageview` -- If this is set to true, then the url on which this script is running will be sent to Thirdwatch, else the url will not be captured.   The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail  ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.   ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ```
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ai\thirdwatch\Model;

use \ArrayAccess;
use \ai\thirdwatch\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @description The Item field type represents a product or service for sale in your business. The value must be a nested object with the appropriate item subfields. Generally used in the add_to_cart and remove_from_cart events.
 * @package  ai\thirdwatch
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_item_id' => 'string',
        '_product_title' => 'string',
        '_price' => 'string',
        '_currency_code' => 'string',
        '_upc' => 'string',
        '_sku' => 'string',
        '_isbn' => 'string',
        '_brand' => 'string',
        '_manufacturer' => 'string',
        '_category' => 'string',
        '_tags' => 'string',
        '_color' => 'string',
        '_quantity' => 'int',
        '_is_on_sale' => 'bool',
        '_max_quantity' => 'int',
        '_discount_price' => 'string',
        '_product_weight' => 'string',
        '_country' => 'string',
        '_description_short' => 'string',
        '_description' => 'string',
        '_seller' => '\ai\thirdwatch\Model\Seller'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_item_id' => null,
        '_product_title' => null,
        '_price' => null,
        '_currency_code' => null,
        '_upc' => null,
        '_sku' => null,
        '_isbn' => null,
        '_brand' => null,
        '_manufacturer' => null,
        '_category' => null,
        '_tags' => null,
        '_color' => null,
        '_quantity' => 'int64',
        '_is_on_sale' => null,
        '_max_quantity' => 'int64',
        '_discount_price' => null,
        '_product_weight' => null,
        '_country' => null,
        '_description_short' => null,
        '_description' => null,
        '_seller' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_item_id' => '_itemId',
        '_product_title' => '_productTitle',
        '_price' => '_price',
        '_currency_code' => '_currencyCode',
        '_upc' => '_upc',
        '_sku' => '_sku',
        '_isbn' => '_isbn',
        '_brand' => '_brand',
        '_manufacturer' => '_manufacturer',
        '_category' => '_category',
        '_tags' => '_tags',
        '_color' => '_color',
        '_quantity' => '_quantity',
        '_is_on_sale' => '_isOnSale',
        '_max_quantity' => '_maxQuantity',
        '_discount_price' => '_discountPrice',
        '_product_weight' => '_productWeight',
        '_country' => '_country',
        '_description_short' => '_descriptionShort',
        '_description' => '_description',
        '_seller' => '_seller'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_item_id' => 'setItemId',
        '_product_title' => 'setProductTitle',
        '_price' => 'setPrice',
        '_currency_code' => 'setCurrencyCode',
        '_upc' => 'setUpc',
        '_sku' => 'setSku',
        '_isbn' => 'setIsbn',
        '_brand' => 'setBrand',
        '_manufacturer' => 'setManufacturer',
        '_category' => 'setCategory',
        '_tags' => 'setTags',
        '_color' => 'setColor',
        '_quantity' => 'setQuantity',
        '_is_on_sale' => 'setIsOnSale',
        '_max_quantity' => 'setMaxQuantity',
        '_discount_price' => 'setDiscountPrice',
        '_product_weight' => 'setProductWeight',
        '_country' => 'setCountry',
        '_description_short' => 'setDescriptionShort',
        '_description' => 'setDescription',
        '_seller' => 'setSeller'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_item_id' => 'getItemId',
        '_product_title' => 'getProductTitle',
        '_price' => 'getPrice',
        '_currency_code' => 'getCurrencyCode',
        '_upc' => 'getUpc',
        '_sku' => 'getSku',
        '_isbn' => 'getIsbn',
        '_brand' => 'getBrand',
        '_manufacturer' => 'getManufacturer',
        '_category' => 'getCategory',
        '_tags' => 'getTags',
        '_color' => 'getColor',
        '_quantity' => 'getQuantity',
        '_is_on_sale' => 'getIsOnSale',
        '_max_quantity' => 'getMaxQuantity',
        '_discount_price' => 'getDiscountPrice',
        '_product_weight' => 'getProductWeight',
        '_country' => 'getCountry',
        '_description_short' => 'getDescriptionShort',
        '_description' => 'getDescription',
        '_seller' => 'getSeller'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_item_id'] = isset($data['_item_id']) ? $data['_item_id'] : null;
        $this->container['_product_title'] = isset($data['_product_title']) ? $data['_product_title'] : null;
        $this->container['_price'] = isset($data['_price']) ? $data['_price'] : null;
        $this->container['_currency_code'] = isset($data['_currency_code']) ? $data['_currency_code'] : null;
        $this->container['_upc'] = isset($data['_upc']) ? $data['_upc'] : null;
        $this->container['_sku'] = isset($data['_sku']) ? $data['_sku'] : null;
        $this->container['_isbn'] = isset($data['_isbn']) ? $data['_isbn'] : null;
        $this->container['_brand'] = isset($data['_brand']) ? $data['_brand'] : null;
        $this->container['_manufacturer'] = isset($data['_manufacturer']) ? $data['_manufacturer'] : null;
        $this->container['_category'] = isset($data['_category']) ? $data['_category'] : null;
        $this->container['_tags'] = isset($data['_tags']) ? $data['_tags'] : null;
        $this->container['_color'] = isset($data['_color']) ? $data['_color'] : null;
        $this->container['_quantity'] = isset($data['_quantity']) ? $data['_quantity'] : null;
        $this->container['_is_on_sale'] = isset($data['_is_on_sale']) ? $data['_is_on_sale'] : null;
        $this->container['_max_quantity'] = isset($data['_max_quantity']) ? $data['_max_quantity'] : null;
        $this->container['_discount_price'] = isset($data['_discount_price']) ? $data['_discount_price'] : null;
        $this->container['_product_weight'] = isset($data['_product_weight']) ? $data['_product_weight'] : null;
        $this->container['_country'] = isset($data['_country']) ? $data['_country'] : null;
        $this->container['_description_short'] = isset($data['_description_short']) ? $data['_description_short'] : null;
        $this->container['_description'] = isset($data['_description']) ? $data['_description'] : null;
        $this->container['_seller'] = isset($data['_seller']) ? $data['_seller'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets _item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['_item_id'];
    }

    /**
     * Sets _item_id
     *
     * @param string $_item_id The item's unique identifier according to your systems. Use the same ID that you would use to look up items on your website's database.
     *
     * @return $this
     */
    public function setItemId($_item_id)
    {
        $this->container['_item_id'] = $_item_id;

        return $this;
    }

    /**
     * Gets _product_title
     *
     * @return string
     */
    public function getProductTitle()
    {
        return $this->container['_product_title'];
    }

    /**
     * Sets _product_title
     *
     * @param string $_product_title The item's name, e.g., \"WD 2 TB External Hard Drive\".
     *
     * @return $this
     */
    public function setProductTitle($_product_title)
    {
        $this->container['_product_title'] = $_product_title;

        return $this;
    }

    /**
     * Gets _price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['_price'];
    }

    /**
     * Sets _price
     *
     * @param string $_price The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\"
     *
     * @return $this
     */
    public function setPrice($_price)
    {
        $this->container['_price'] = $_price;

        return $this;
    }

    /**
     * Gets _currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['_currency_code'];
    }

    /**
     * Sets _currency_code
     *
     * @param string $_currency_code The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems.
     *
     * @return $this
     */
    public function setCurrencyCode($_currency_code)
    {
        $this->container['_currency_code'] = $_currency_code;

        return $this;
    }

    /**
     * Gets _upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['_upc'];
    }

    /**
     * Sets _upc
     *
     * @param string $_upc If the item has a Universal Product Code (UPC), provide it here.
     *
     * @return $this
     */
    public function setUpc($_upc)
    {
        $this->container['_upc'] = $_upc;

        return $this;
    }

    /**
     * Gets _sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['_sku'];
    }

    /**
     * Sets _sku
     *
     * @param string $_sku If the item has a Stock-keeping Unit ID (SKU), provide it here.
     *
     * @return $this
     */
    public function setSku($_sku)
    {
        $this->container['_sku'] = $_sku;

        return $this;
    }

    /**
     * Gets _isbn
     *
     * @return string
     */
    public function getIsbn()
    {
        return $this->container['_isbn'];
    }

    /**
     * Sets _isbn
     *
     * @param string $_isbn If the item is a book with an International Standard Book Number (ISBN), provide it here.
     *
     * @return $this
     */
    public function setIsbn($_isbn)
    {
        $this->container['_isbn'] = $_isbn;

        return $this;
    }

    /**
     * Gets _brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['_brand'];
    }

    /**
     * Sets _brand
     *
     * @param string $_brand The brand name of the item.
     *
     * @return $this
     */
    public function setBrand($_brand)
    {
        $this->container['_brand'] = $_brand;

        return $this;
    }

    /**
     * Gets _manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['_manufacturer'];
    }

    /**
     * Sets _manufacturer
     *
     * @param string $_manufacturer Name of the item's manufacturer.
     *
     * @return $this
     */
    public function setManufacturer($_manufacturer)
    {
        $this->container['_manufacturer'] = $_manufacturer;

        return $this;
    }

    /**
     * Gets _category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['_category'];
    }

    /**
     * Sets _category
     *
     * @param string $_category The category this item is listed under in your business. e.g., \"travel\", \"man > bags\".
     *
     * @return $this
     */
    public function setCategory($_category)
    {
        $this->container['_category'] = $_category;

        return $this;
    }

    /**
     * Gets _tags
     *
     * @return string
     */
    public function getTags()
    {
        return $this->container['_tags'];
    }

    /**
     * Sets _tags
     *
     * @param string $_tags The tags used to describe this item in your business. e.g., \"man\", \"summer\".
     *
     * @return $this
     */
    public function setTags($_tags)
    {
        $this->container['_tags'] = $_tags;

        return $this;
    }

    /**
     * Gets _color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['_color'];
    }

    /**
     * Sets _color
     *
     * @param string $_color The color of the item.
     *
     * @return $this
     */
    public function setColor($_color)
    {
        $this->container['_color'] = $_color;

        return $this;
    }

    /**
     * Gets _quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['_quantity'];
    }

    /**
     * Sets _quantity
     *
     * @param int $_quantity The quantity of the item.
     *
     * @return $this
     */
    public function setQuantity($_quantity)
    {
        $this->container['_quantity'] = $_quantity;

        return $this;
    }

    /**
     * Gets _is_on_sale
     *
     * @return bool
     */
    public function getIsOnSale()
    {
        return $this->container['_is_on_sale'];
    }

    /**
     * Sets _is_on_sale
     *
     * @param bool $_is_on_sale Is item on sale or running offers on this item .
     *
     * @return $this
     */
    public function setIsOnSale($_is_on_sale)
    {
        $this->container['_is_on_sale'] = $_is_on_sale;

        return $this;
    }

    /**
     * Gets _max_quantity
     *
     * @return int
     */
    public function getMaxQuantity()
    {
        return $this->container['_max_quantity'];
    }

    /**
     * Sets _max_quantity
     *
     * @param int $_max_quantity The max quantity per user for this item.
     *
     * @return $this
     */
    public function setMaxQuantity($_max_quantity)
    {
        $this->container['_max_quantity'] = $_max_quantity;

        return $this;
    }

    /**
     * Gets _discount_price
     *
     * @return string
     */
    public function getDiscountPrice()
    {
        return $this->container['_discount_price'];
    }

    /**
     * Sets _discount_price
     *
     * @param string $_discount_price Price of the product after discount.
     *
     * @return $this
     */
    public function setDiscountPrice($_discount_price)
    {
        $this->container['_discount_price'] = $_discount_price;

        return $this;
    }

    /**
     * Gets _product_weight
     *
     * @return string
     */
    public function getProductWeight()
    {
        return $this->container['_product_weight'];
    }

    /**
     * Sets _product_weight
     *
     * @param string $_product_weight Weight of the product in Kilo Gram, e.g. \"3\" , \"0.5\"
     *
     * @return $this
     */
    public function setProductWeight($_product_weight)
    {
        $this->container['_product_weight'] = $_product_weight;

        return $this;
    }

    /**
     * Gets _country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['_country'];
    }

    /**
     * Sets _country
     *
     * @param string $_country The [ISO-3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the item, e.g., \"IN\" in case of India.
     *
     * @return $this
     */
    public function setCountry($_country)
    {
        $this->container['_country'] = $_country;

        return $this;
    }

    /**
     * Gets _description_short
     *
     * @return string
     */
    public function getDescriptionShort()
    {
        return $this->container['_description_short'];
    }

    /**
     * Sets _description_short
     *
     * @param string $_description_short Short description of the item.
     *
     * @return $this
     */
    public function setDescriptionShort($_description_short)
    {
        $this->container['_description_short'] = $_description_short;

        return $this;
    }

    /**
     * Gets _description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['_description'];
    }

    /**
     * Sets _description
     *
     * @param string $_description Detail description of the item.
     *
     * @return $this
     */
    public function setDescription($_description)
    {
        $this->container['_description'] = $_description;

        return $this;
    }

    /**
     * Gets _seller
     *
     * @return \ai\thirdwatch\Model\Seller
     */
    public function getSeller()
    {
        return $this->container['_seller'];
    }

    /**
     * Sets _seller
     *
     * @param \ai\thirdwatch\Model\Seller $_seller _seller
     *
     * @return $this
     */
    public function setSeller($_seller)
    {
        $this->container['_seller'] = $_seller;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


