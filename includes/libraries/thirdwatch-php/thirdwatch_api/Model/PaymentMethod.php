<?php
/**
 * PaymentMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  ai\thirdwatch
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Thirdwatch API
 *
 * The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.  Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  JavaScript Fingerprinting module for capturing unique devices and tracking user interaction.  This script will identify unique devices with respect to the browser. For e.g., if chrome is opened in normal mode a unique device id is generated and this will be same if chrome is opened in incognito mode or reinstalled.  Paste the below script onto your webpage, just after the opening `<body>` tag. This script should be added to the page which is accessed externally by the user of your website. For e.g., If you want to track three different webpages then paste the below script onto each webpage, just after the opening `<body>` tag. This script should not be added onto internal tools or admin panels. ```   &lt;script id=\"thirdwatch\"     data-session-cookie-name=\"&lt;cookie_name&gt;\"     data-session-id-value=\"&lt;session_id&gt;\"     data-user-id=\"&lt;user_id&gt;\"     data-app-secret=\"&lt;app_secret&gt;\"     data-is-track-pageview=\"true\"&gt; (function() {         var loadDeviceJs = function() {         var element = document.createElement(\"script\");         element.async = 1;         element.src = \"https://cdn.thirdwatch.ai/tw.min.js\";         document.body.appendChild(element);         };         if (window.addEventListener) {              window.addEventListener(\"load\", loadDeviceJs, false);         } else if (window.attachEvent) {         window.attachEvent(\"onload\", loadDeviceJs);         }     })();   &lt;/script&gt; ``` * `data-session-cookie-name` -- The cookie name where you are saving the unique session id. We will pick the session id by reading its value from the cookie name. (Optional) * `data-session-id-value` -- In case you are not passing `data-session-cookie-name` than you can put session id directly in this parameter. In absence of both `data-session-cookie-name` and `data-session-id-value`, our system will generate a session Id. (Optional) * `data-user-id` -- Unique user id at your end. This can be email id or primary key in the database. In case of guest user, you can insert session Id here. * `data-app-secret` -- Unique App secret generated for you by Thirdwatch. * `data-is-track-pageview` -- If this is set to true, then the url on which this script is running will be sent to Thirdwatch, else the url will not be captured.   The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail  ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.   ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ```
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ai\thirdwatch\Model;

use \ArrayAccess;
use \ai\thirdwatch\ObjectSerializer;

/**
 * PaymentMethod Class Doc Comment
 *
 * @category Class
 * @description The payment_method field type represents information about the payment methods provided by the user. The value must be a nested object with the appropriate item subfields for the given payment method. Generally usedwith the create_order or transaction events.
 * @package  ai\thirdwatch
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_payment_type' => 'string',
        '_amount' => 'string',
        '_currency_code' => 'string',
        '_payment_gateway' => 'string',
        '_account_name' => 'string',
        '_card_bin' => 'string',
        '_avs_response_code' => 'string',
        '_cvv_response_code' => 'string',
        '_card_last4' => 'string',
        '_card_expiry_month' => 'string',
        '_card_expiry_year' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_payment_type' => null,
        '_amount' => null,
        '_currency_code' => null,
        '_payment_gateway' => null,
        '_account_name' => null,
        '_card_bin' => null,
        '_avs_response_code' => null,
        '_cvv_response_code' => null,
        '_card_last4' => null,
        '_card_expiry_month' => null,
        '_card_expiry_year' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_payment_type' => '_paymentType',
        '_amount' => '_amount',
        '_currency_code' => '_currencyCode',
        '_payment_gateway' => '_paymentGateway',
        '_account_name' => '_accountName',
        '_card_bin' => '_cardBin',
        '_avs_response_code' => '_avsResponseCode',
        '_cvv_response_code' => '_cvvResponseCode',
        '_card_last4' => '_cardLast4',
        '_card_expiry_month' => '_cardExpiryMonth',
        '_card_expiry_year' => '_cardExpiryYear'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_payment_type' => 'setPaymentType',
        '_amount' => 'setAmount',
        '_currency_code' => 'setCurrencyCode',
        '_payment_gateway' => 'setPaymentGateway',
        '_account_name' => 'setAccountName',
        '_card_bin' => 'setCardBin',
        '_avs_response_code' => 'setAvsResponseCode',
        '_cvv_response_code' => 'setCvvResponseCode',
        '_card_last4' => 'setCardLast4',
        '_card_expiry_month' => 'setCardExpiryMonth',
        '_card_expiry_year' => 'setCardExpiryYear'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_payment_type' => 'getPaymentType',
        '_amount' => 'getAmount',
        '_currency_code' => 'getCurrencyCode',
        '_payment_gateway' => 'getPaymentGateway',
        '_account_name' => 'getAccountName',
        '_card_bin' => 'getCardBin',
        '_avs_response_code' => 'getAvsResponseCode',
        '_cvv_response_code' => 'getCvvResponseCode',
        '_card_last4' => 'getCardLast4',
        '_card_expiry_month' => 'getCardExpiryMonth',
        '_card_expiry_year' => 'getCardExpiryYear'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_payment_type'] = isset($data['_payment_type']) ? $data['_payment_type'] : null;
        $this->container['_amount'] = isset($data['_amount']) ? $data['_amount'] : null;
        $this->container['_currency_code'] = isset($data['_currency_code']) ? $data['_currency_code'] : null;
        $this->container['_payment_gateway'] = isset($data['_payment_gateway']) ? $data['_payment_gateway'] : null;
        $this->container['_account_name'] = isset($data['_account_name']) ? $data['_account_name'] : null;
        $this->container['_card_bin'] = isset($data['_card_bin']) ? $data['_card_bin'] : null;
        $this->container['_avs_response_code'] = isset($data['_avs_response_code']) ? $data['_avs_response_code'] : null;
        $this->container['_cvv_response_code'] = isset($data['_cvv_response_code']) ? $data['_cvv_response_code'] : null;
        $this->container['_card_last4'] = isset($data['_card_last4']) ? $data['_card_last4'] : null;
        $this->container['_card_expiry_month'] = isset($data['_card_expiry_month']) ? $data['_card_expiry_month'] : null;
        $this->container['_card_expiry_year'] = isset($data['_card_expiry_year']) ? $data['_card_expiry_year'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets _payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['_payment_type'];
    }

    /**
     * Sets _payment_type
     *
     * @param string $_payment_type Values like - _cash, _check, _creditCard, _debitCard, _netBanking, _wallet, _cryptoCurrency, _electronicFundTransfer, _financing, _giftCard, _interac, _invoice, _moneyOrder, _masterPass, _points, _storeCredit, _thirdPartyProcessor, _voucher
     *
     * @return $this
     */
    public function setPaymentType($_payment_type)
    {
        $this->container['_payment_type'] = $_payment_type;

        return $this;
    }

    /**
     * Gets _amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['_amount'];
    }

    /**
     * Sets _amount
     *
     * @param string $_amount The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\". In case of multiple payment methods in order it's useful.
     *
     * @return $this
     */
    public function setAmount($_amount)
    {
        $this->container['_amount'] = $_amount;

        return $this;
    }

    /**
     * Gets _currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['_currency_code'];
    }

    /**
     * Sets _currency_code
     *
     * @param string $_currency_code The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems. In case of multiple payment methods in order it's useful.
     *
     * @return $this
     */
    public function setCurrencyCode($_currency_code)
    {
        $this->container['_currency_code'] = $_currency_code;

        return $this;
    }

    /**
     * Gets _payment_gateway
     *
     * @return string
     */
    public function getPaymentGateway()
    {
        return $this->container['_payment_gateway'];
    }

    /**
     * Sets _payment_gateway
     *
     * @param string $_payment_gateway fill value like bank name, gateway name, wallet name etc, e.g. payu, paypal, icici, paytm
     *
     * @return $this
     */
    public function setPaymentGateway($_payment_gateway)
    {
        $this->container['_payment_gateway'] = $_payment_gateway;

        return $this;
    }

    /**
     * Gets _account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['_account_name'];
    }

    /**
     * Sets _account_name
     *
     * @param string $_account_name Account name oif the user for that payment method
     *
     * @return $this
     */
    public function setAccountName($_account_name)
    {
        $this->container['_account_name'] = $_account_name;

        return $this;
    }

    /**
     * Gets _card_bin
     *
     * @return string
     */
    public function getCardBin()
    {
        return $this->container['_card_bin'];
    }

    /**
     * Sets _card_bin
     *
     * @param string $_card_bin The first six digits of the credit card number. These numbers contain information about the card issuer, the geography and other card details.
     *
     * @return $this
     */
    public function setCardBin($_card_bin)
    {
        $this->container['_card_bin'] = $_card_bin;

        return $this;
    }

    /**
     * Gets _avs_response_code
     *
     * @return string
     */
    public function getAvsResponseCode()
    {
        return $this->container['_avs_response_code'];
    }

    /**
     * Sets _avs_response_code
     *
     * @param string $_avs_response_code Response code from the AVS address verification system. Used in payments involving credit cards.
     *
     * @return $this
     */
    public function setAvsResponseCode($_avs_response_code)
    {
        $this->container['_avs_response_code'] = $_avs_response_code;

        return $this;
    }

    /**
     * Gets _cvv_response_code
     *
     * @return string
     */
    public function getCvvResponseCode()
    {
        return $this->container['_cvv_response_code'];
    }

    /**
     * Sets _cvv_response_code
     *
     * @param string $_cvv_response_code Response code from the credit card company indicating if the CVV number entered matches the number on record. Used in payments involving credit cards.
     *
     * @return $this
     */
    public function setCvvResponseCode($_cvv_response_code)
    {
        $this->container['_cvv_response_code'] = $_cvv_response_code;

        return $this;
    }

    /**
     * Gets _card_last4
     *
     * @return string
     */
    public function getCardLast4()
    {
        return $this->container['_card_last4'];
    }

    /**
     * Sets _card_last4
     *
     * @param string $_card_last4 The last four digits of the credit card number.
     *
     * @return $this
     */
    public function setCardLast4($_card_last4)
    {
        $this->container['_card_last4'] = $_card_last4;

        return $this;
    }

    /**
     * Gets _card_expiry_month
     *
     * @return string
     */
    public function getCardExpiryMonth()
    {
        return $this->container['_card_expiry_month'];
    }

    /**
     * Sets _card_expiry_month
     *
     * @param string $_card_expiry_month Expiry month of the card.
     *
     * @return $this
     */
    public function setCardExpiryMonth($_card_expiry_month)
    {
        $this->container['_card_expiry_month'] = $_card_expiry_month;

        return $this;
    }

    /**
     * Gets _card_expiry_year
     *
     * @return string
     */
    public function getCardExpiryYear()
    {
        return $this->container['_card_expiry_year'];
    }

    /**
     * Sets _card_expiry_year
     *
     * @param string $_card_expiry_year Expiry year of the card.
     *
     * @return $this
     */
    public function setCardExpiryYear($_card_expiry_year)
    {
        $this->container['_card_expiry_year'] = $_card_expiry_year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


